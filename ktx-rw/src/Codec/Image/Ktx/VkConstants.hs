{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- This module is a port of the vk_format.h file included under /ktx-rw/refsrc.

module Codec.Image.Ktx.VkConstants where

import Codec.Image.Ktx.GlConstants
import Control.Exception
import Data.Bits
import Data.Word

type VkFormat n = (Num n, Eq n, Show n)

pattern VK_FORMAT_UNDEFINED :: VkFormat n => n
pattern VK_FORMAT_UNDEFINED = 0
pattern VK_FORMAT_R4G4_UNORM_PACK8 :: VkFormat n => n
pattern VK_FORMAT_R4G4_UNORM_PACK8 = 1
pattern VK_FORMAT_R4G4B4A4_UNORM_PACK16 :: VkFormat n => n
pattern VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
pattern VK_FORMAT_B4G4R4A4_UNORM_PACK16 :: VkFormat n => n
pattern VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
pattern VK_FORMAT_R5G6B5_UNORM_PACK16 :: VkFormat n => n
pattern VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
pattern VK_FORMAT_B5G6R5_UNORM_PACK16 :: VkFormat n => n
pattern VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
pattern VK_FORMAT_R5G5B5A1_UNORM_PACK16 :: VkFormat n => n
pattern VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
pattern VK_FORMAT_B5G5R5A1_UNORM_PACK16 :: VkFormat n => n
pattern VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
pattern VK_FORMAT_A1R5G5B5_UNORM_PACK16 :: VkFormat n => n
pattern VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
pattern VK_FORMAT_R8_UNORM :: VkFormat n => n
pattern VK_FORMAT_R8_UNORM = 9
pattern VK_FORMAT_R8_SNORM :: VkFormat n => n
pattern VK_FORMAT_R8_SNORM = 10
pattern VK_FORMAT_R8_USCALED :: VkFormat n => n
pattern VK_FORMAT_R8_USCALED = 11
pattern VK_FORMAT_R8_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R8_SSCALED = 12
pattern VK_FORMAT_R8_UINT :: VkFormat n => n
pattern VK_FORMAT_R8_UINT = 13
pattern VK_FORMAT_R8_SINT :: VkFormat n => n
pattern VK_FORMAT_R8_SINT = 14
pattern VK_FORMAT_R8_SRGB :: VkFormat n => n
pattern VK_FORMAT_R8_SRGB = 15
pattern VK_FORMAT_R8G8_UNORM :: VkFormat n => n
pattern VK_FORMAT_R8G8_UNORM = 16
pattern VK_FORMAT_R8G8_SNORM :: VkFormat n => n
pattern VK_FORMAT_R8G8_SNORM = 17
pattern VK_FORMAT_R8G8_USCALED :: VkFormat n => n
pattern VK_FORMAT_R8G8_USCALED = 18
pattern VK_FORMAT_R8G8_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R8G8_SSCALED = 19
pattern VK_FORMAT_R8G8_UINT :: VkFormat n => n
pattern VK_FORMAT_R8G8_UINT = 20
pattern VK_FORMAT_R8G8_SINT :: VkFormat n => n
pattern VK_FORMAT_R8G8_SINT = 21
pattern VK_FORMAT_R8G8_SRGB :: VkFormat n => n
pattern VK_FORMAT_R8G8_SRGB = 22
pattern VK_FORMAT_R8G8B8_UNORM :: VkFormat n => n
pattern VK_FORMAT_R8G8B8_UNORM = 23
pattern VK_FORMAT_R8G8B8_SNORM :: VkFormat n => n
pattern VK_FORMAT_R8G8B8_SNORM = 24
pattern VK_FORMAT_R8G8B8_USCALED :: VkFormat n => n
pattern VK_FORMAT_R8G8B8_USCALED = 25
pattern VK_FORMAT_R8G8B8_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R8G8B8_SSCALED = 26
pattern VK_FORMAT_R8G8B8_UINT :: VkFormat n => n
pattern VK_FORMAT_R8G8B8_UINT = 27
pattern VK_FORMAT_R8G8B8_SINT :: VkFormat n => n
pattern VK_FORMAT_R8G8B8_SINT = 28
pattern VK_FORMAT_R8G8B8_SRGB :: VkFormat n => n
pattern VK_FORMAT_R8G8B8_SRGB = 29
pattern VK_FORMAT_B8G8R8_UNORM :: VkFormat n => n
pattern VK_FORMAT_B8G8R8_UNORM = 30
pattern VK_FORMAT_B8G8R8_SNORM :: VkFormat n => n
pattern VK_FORMAT_B8G8R8_SNORM = 31
pattern VK_FORMAT_B8G8R8_USCALED :: VkFormat n => n
pattern VK_FORMAT_B8G8R8_USCALED = 32
pattern VK_FORMAT_B8G8R8_SSCALED :: VkFormat n => n
pattern VK_FORMAT_B8G8R8_SSCALED = 33
pattern VK_FORMAT_B8G8R8_UINT :: VkFormat n => n
pattern VK_FORMAT_B8G8R8_UINT = 34
pattern VK_FORMAT_B8G8R8_SINT :: VkFormat n => n
pattern VK_FORMAT_B8G8R8_SINT = 35
pattern VK_FORMAT_B8G8R8_SRGB :: VkFormat n => n
pattern VK_FORMAT_B8G8R8_SRGB = 36
pattern VK_FORMAT_R8G8B8A8_UNORM :: VkFormat n => n
pattern VK_FORMAT_R8G8B8A8_UNORM = 37
pattern VK_FORMAT_R8G8B8A8_SNORM :: VkFormat n => n
pattern VK_FORMAT_R8G8B8A8_SNORM = 38
pattern VK_FORMAT_R8G8B8A8_USCALED :: VkFormat n => n
pattern VK_FORMAT_R8G8B8A8_USCALED = 39
pattern VK_FORMAT_R8G8B8A8_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R8G8B8A8_SSCALED = 40
pattern VK_FORMAT_R8G8B8A8_UINT :: VkFormat n => n
pattern VK_FORMAT_R8G8B8A8_UINT = 41
pattern VK_FORMAT_R8G8B8A8_SINT :: VkFormat n => n
pattern VK_FORMAT_R8G8B8A8_SINT = 42
pattern VK_FORMAT_R8G8B8A8_SRGB :: VkFormat n => n
pattern VK_FORMAT_R8G8B8A8_SRGB = 43
pattern VK_FORMAT_B8G8R8A8_UNORM :: VkFormat n => n
pattern VK_FORMAT_B8G8R8A8_UNORM = 44
pattern VK_FORMAT_B8G8R8A8_SNORM :: VkFormat n => n
pattern VK_FORMAT_B8G8R8A8_SNORM = 45
pattern VK_FORMAT_B8G8R8A8_USCALED :: VkFormat n => n
pattern VK_FORMAT_B8G8R8A8_USCALED = 46
pattern VK_FORMAT_B8G8R8A8_SSCALED :: VkFormat n => n
pattern VK_FORMAT_B8G8R8A8_SSCALED = 47
pattern VK_FORMAT_B8G8R8A8_UINT :: VkFormat n => n
pattern VK_FORMAT_B8G8R8A8_UINT = 48
pattern VK_FORMAT_B8G8R8A8_SINT :: VkFormat n => n
pattern VK_FORMAT_B8G8R8A8_SINT = 49
pattern VK_FORMAT_B8G8R8A8_SRGB :: VkFormat n => n
pattern VK_FORMAT_B8G8R8A8_SRGB = 50
pattern VK_FORMAT_A8B8G8R8_UNORM_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
pattern VK_FORMAT_A8B8G8R8_SNORM_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
pattern VK_FORMAT_A8B8G8R8_USCALED_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
pattern VK_FORMAT_A8B8G8R8_SSCALED_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
pattern VK_FORMAT_A8B8G8R8_UINT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
pattern VK_FORMAT_A8B8G8R8_SINT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
pattern VK_FORMAT_A8B8G8R8_SRGB_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
pattern VK_FORMAT_A2R10G10B10_UNORM_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
pattern VK_FORMAT_A2R10G10B10_SNORM_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
pattern VK_FORMAT_A2R10G10B10_USCALED_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
pattern VK_FORMAT_A2R10G10B10_SSCALED_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
pattern VK_FORMAT_A2R10G10B10_UINT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
pattern VK_FORMAT_A2R10G10B10_SINT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
pattern VK_FORMAT_A2B10G10R10_UNORM_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
pattern VK_FORMAT_A2B10G10R10_SNORM_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
pattern VK_FORMAT_A2B10G10R10_USCALED_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
pattern VK_FORMAT_A2B10G10R10_SSCALED_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
pattern VK_FORMAT_A2B10G10R10_UINT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
pattern VK_FORMAT_A2B10G10R10_SINT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
pattern VK_FORMAT_R16_UNORM :: VkFormat n => n
pattern VK_FORMAT_R16_UNORM = 70
pattern VK_FORMAT_R16_SNORM :: VkFormat n => n
pattern VK_FORMAT_R16_SNORM = 71
pattern VK_FORMAT_R16_USCALED :: VkFormat n => n
pattern VK_FORMAT_R16_USCALED = 72
pattern VK_FORMAT_R16_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R16_SSCALED = 73
pattern VK_FORMAT_R16_UINT :: VkFormat n => n
pattern VK_FORMAT_R16_UINT = 74
pattern VK_FORMAT_R16_SINT :: VkFormat n => n
pattern VK_FORMAT_R16_SINT = 75
pattern VK_FORMAT_R16_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R16_SFLOAT = 76
pattern VK_FORMAT_R16G16_UNORM :: VkFormat n => n
pattern VK_FORMAT_R16G16_UNORM = 77
pattern VK_FORMAT_R16G16_SNORM :: VkFormat n => n
pattern VK_FORMAT_R16G16_SNORM = 78
pattern VK_FORMAT_R16G16_USCALED :: VkFormat n => n
pattern VK_FORMAT_R16G16_USCALED = 79
pattern VK_FORMAT_R16G16_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R16G16_SSCALED = 80
pattern VK_FORMAT_R16G16_UINT :: VkFormat n => n
pattern VK_FORMAT_R16G16_UINT = 81
pattern VK_FORMAT_R16G16_SINT :: VkFormat n => n
pattern VK_FORMAT_R16G16_SINT = 82
pattern VK_FORMAT_R16G16_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R16G16_SFLOAT = 83
pattern VK_FORMAT_R16G16B16_UNORM :: VkFormat n => n
pattern VK_FORMAT_R16G16B16_UNORM = 84
pattern VK_FORMAT_R16G16B16_SNORM :: VkFormat n => n
pattern VK_FORMAT_R16G16B16_SNORM = 85
pattern VK_FORMAT_R16G16B16_USCALED :: VkFormat n => n
pattern VK_FORMAT_R16G16B16_USCALED = 86
pattern VK_FORMAT_R16G16B16_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R16G16B16_SSCALED = 87
pattern VK_FORMAT_R16G16B16_UINT :: VkFormat n => n
pattern VK_FORMAT_R16G16B16_UINT = 88
pattern VK_FORMAT_R16G16B16_SINT :: VkFormat n => n
pattern VK_FORMAT_R16G16B16_SINT = 89
pattern VK_FORMAT_R16G16B16_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R16G16B16_SFLOAT = 90
pattern VK_FORMAT_R16G16B16A16_UNORM :: VkFormat n => n
pattern VK_FORMAT_R16G16B16A16_UNORM = 91
pattern VK_FORMAT_R16G16B16A16_SNORM :: VkFormat n => n
pattern VK_FORMAT_R16G16B16A16_SNORM = 92
pattern VK_FORMAT_R16G16B16A16_USCALED :: VkFormat n => n
pattern VK_FORMAT_R16G16B16A16_USCALED = 93
pattern VK_FORMAT_R16G16B16A16_SSCALED :: VkFormat n => n
pattern VK_FORMAT_R16G16B16A16_SSCALED = 94
pattern VK_FORMAT_R16G16B16A16_UINT :: VkFormat n => n
pattern VK_FORMAT_R16G16B16A16_UINT = 95
pattern VK_FORMAT_R16G16B16A16_SINT :: VkFormat n => n
pattern VK_FORMAT_R16G16B16A16_SINT = 96
pattern VK_FORMAT_R16G16B16A16_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R16G16B16A16_SFLOAT = 97
pattern VK_FORMAT_R32_UINT :: VkFormat n => n
pattern VK_FORMAT_R32_UINT = 98
pattern VK_FORMAT_R32_SINT :: VkFormat n => n
pattern VK_FORMAT_R32_SINT = 99
pattern VK_FORMAT_R32_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R32_SFLOAT = 100
pattern VK_FORMAT_R32G32_UINT :: VkFormat n => n
pattern VK_FORMAT_R32G32_UINT = 101
pattern VK_FORMAT_R32G32_SINT :: VkFormat n => n
pattern VK_FORMAT_R32G32_SINT = 102
pattern VK_FORMAT_R32G32_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R32G32_SFLOAT = 103
pattern VK_FORMAT_R32G32B32_UINT :: VkFormat n => n
pattern VK_FORMAT_R32G32B32_UINT = 104
pattern VK_FORMAT_R32G32B32_SINT :: VkFormat n => n
pattern VK_FORMAT_R32G32B32_SINT = 105
pattern VK_FORMAT_R32G32B32_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R32G32B32_SFLOAT = 106
pattern VK_FORMAT_R32G32B32A32_UINT :: VkFormat n => n
pattern VK_FORMAT_R32G32B32A32_UINT = 107
pattern VK_FORMAT_R32G32B32A32_SINT :: VkFormat n => n
pattern VK_FORMAT_R32G32B32A32_SINT = 108
pattern VK_FORMAT_R32G32B32A32_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R32G32B32A32_SFLOAT = 109
pattern VK_FORMAT_R64_UINT :: VkFormat n => n
pattern VK_FORMAT_R64_UINT = 110
pattern VK_FORMAT_R64_SINT :: VkFormat n => n
pattern VK_FORMAT_R64_SINT = 111
pattern VK_FORMAT_R64_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R64_SFLOAT = 112
pattern VK_FORMAT_R64G64_UINT :: VkFormat n => n
pattern VK_FORMAT_R64G64_UINT = 113
pattern VK_FORMAT_R64G64_SINT :: VkFormat n => n
pattern VK_FORMAT_R64G64_SINT = 114
pattern VK_FORMAT_R64G64_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R64G64_SFLOAT = 115
pattern VK_FORMAT_R64G64B64_UINT :: VkFormat n => n
pattern VK_FORMAT_R64G64B64_UINT = 116
pattern VK_FORMAT_R64G64B64_SINT :: VkFormat n => n
pattern VK_FORMAT_R64G64B64_SINT = 117
pattern VK_FORMAT_R64G64B64_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R64G64B64_SFLOAT = 118
pattern VK_FORMAT_R64G64B64A64_UINT :: VkFormat n => n
pattern VK_FORMAT_R64G64B64A64_UINT = 119
pattern VK_FORMAT_R64G64B64A64_SINT :: VkFormat n => n
pattern VK_FORMAT_R64G64B64A64_SINT = 120
pattern VK_FORMAT_R64G64B64A64_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_R64G64B64A64_SFLOAT = 121
pattern VK_FORMAT_B10G11R11_UFLOAT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
pattern VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 :: VkFormat n => n
pattern VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
pattern VK_FORMAT_D16_UNORM :: VkFormat n => n
pattern VK_FORMAT_D16_UNORM = 124
pattern VK_FORMAT_X8_D24_UNORM_PACK32 :: VkFormat n => n
pattern VK_FORMAT_X8_D24_UNORM_PACK32 = 125
pattern VK_FORMAT_D32_SFLOAT :: VkFormat n => n
pattern VK_FORMAT_D32_SFLOAT = 126
pattern VK_FORMAT_S8_UINT :: VkFormat n => n
pattern VK_FORMAT_S8_UINT = 127
pattern VK_FORMAT_D16_UNORM_S8_UINT :: VkFormat n => n
pattern VK_FORMAT_D16_UNORM_S8_UINT = 128
pattern VK_FORMAT_D24_UNORM_S8_UINT :: VkFormat n => n
pattern VK_FORMAT_D24_UNORM_S8_UINT = 129
pattern VK_FORMAT_D32_SFLOAT_S8_UINT :: VkFormat n => n
pattern VK_FORMAT_D32_SFLOAT_S8_UINT = 130
pattern VK_FORMAT_BC1_RGB_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
pattern VK_FORMAT_BC1_RGB_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
pattern VK_FORMAT_BC1_RGBA_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
pattern VK_FORMAT_BC1_RGBA_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
pattern VK_FORMAT_BC2_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC2_UNORM_BLOCK = 135
pattern VK_FORMAT_BC2_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC2_SRGB_BLOCK = 136
pattern VK_FORMAT_BC3_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC3_UNORM_BLOCK = 137
pattern VK_FORMAT_BC3_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC3_SRGB_BLOCK = 138
pattern VK_FORMAT_BC4_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC4_UNORM_BLOCK = 139
pattern VK_FORMAT_BC4_SNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC4_SNORM_BLOCK = 140
pattern VK_FORMAT_BC5_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC5_UNORM_BLOCK = 141
pattern VK_FORMAT_BC5_SNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC5_SNORM_BLOCK = 142
pattern VK_FORMAT_BC6H_UFLOAT_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
pattern VK_FORMAT_BC6H_SFLOAT_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
pattern VK_FORMAT_BC7_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC7_UNORM_BLOCK = 145
pattern VK_FORMAT_BC7_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_BC7_SRGB_BLOCK = 146
pattern VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
pattern VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
pattern VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
pattern VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
pattern VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
pattern VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
pattern VK_FORMAT_EAC_R11_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
pattern VK_FORMAT_EAC_R11_SNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
pattern VK_FORMAT_EAC_R11G11_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
pattern VK_FORMAT_EAC_R11G11_SNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
pattern VK_FORMAT_ASTC_4x4_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
pattern VK_FORMAT_ASTC_4x4_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
pattern VK_FORMAT_ASTC_5x4_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
pattern VK_FORMAT_ASTC_5x4_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
pattern VK_FORMAT_ASTC_5x5_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
pattern VK_FORMAT_ASTC_5x5_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
pattern VK_FORMAT_ASTC_6x5_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
pattern VK_FORMAT_ASTC_6x5_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
pattern VK_FORMAT_ASTC_6x6_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
pattern VK_FORMAT_ASTC_6x6_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
pattern VK_FORMAT_ASTC_8x5_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
pattern VK_FORMAT_ASTC_8x5_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
pattern VK_FORMAT_ASTC_8x6_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
pattern VK_FORMAT_ASTC_8x6_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
pattern VK_FORMAT_ASTC_8x8_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
pattern VK_FORMAT_ASTC_8x8_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
pattern VK_FORMAT_ASTC_10x5_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
pattern VK_FORMAT_ASTC_10x5_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
pattern VK_FORMAT_ASTC_10x6_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
pattern VK_FORMAT_ASTC_10x6_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
pattern VK_FORMAT_ASTC_10x8_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
pattern VK_FORMAT_ASTC_10x8_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
pattern VK_FORMAT_ASTC_10x10_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
pattern VK_FORMAT_ASTC_10x10_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
pattern VK_FORMAT_ASTC_12x10_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
pattern VK_FORMAT_ASTC_12x10_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
pattern VK_FORMAT_ASTC_12x12_UNORM_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
pattern VK_FORMAT_ASTC_12x12_SRGB_BLOCK :: VkFormat n => n
pattern VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184

getVkFormatFromGlTypeAndFormat ::
  (GlEnum g, VkFormat v) =>
  g -> -- GL type
  g -> -- GL format
  v
getVkFormatFromGlTypeAndFormat = \case

  --
  -- 8 bits per component
  --
  GL_UNSIGNED_BYTE -> \case
    GL_RED -> VK_FORMAT_R8_UNORM
    GL_RG -> VK_FORMAT_R8G8_UNORM
    GL_RGB -> VK_FORMAT_R8G8B8_UNORM
    GL_BGR -> VK_FORMAT_B8G8R8_UNORM
    GL_RGBA -> VK_FORMAT_R8G8B8A8_UNORM
    GL_BGRA -> VK_FORMAT_B8G8R8A8_UNORM
    GL_RED_INTEGER -> VK_FORMAT_R8_UINT
    GL_RG_INTEGER -> VK_FORMAT_R8G8_UINT
    GL_RGB_INTEGER -> VK_FORMAT_R8G8B8_UINT
    GL_BGR_INTEGER -> VK_FORMAT_B8G8R8_UINT
    GL_RGBA_INTEGER -> VK_FORMAT_R8G8B8A8_UINT
    GL_BGRA_INTEGER -> VK_FORMAT_B8G8R8A8_UINT
    GL_STENCIL_INDEX -> VK_FORMAT_S8_UINT
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  GL_BYTE -> \case
    GL_RED -> VK_FORMAT_R8_SNORM
    GL_RG -> VK_FORMAT_R8G8_SNORM
    GL_RGB -> VK_FORMAT_R8G8B8_SNORM
    GL_BGR -> VK_FORMAT_B8G8R8_SNORM
    GL_RGBA -> VK_FORMAT_R8G8B8A8_SNORM
    GL_BGRA -> VK_FORMAT_B8G8R8A8_SNORM
    GL_RED_INTEGER -> VK_FORMAT_R8_SINT
    GL_RG_INTEGER -> VK_FORMAT_R8G8_SINT
    GL_RGB_INTEGER -> VK_FORMAT_R8G8B8_SINT
    GL_BGR_INTEGER -> VK_FORMAT_B8G8R8_SINT
    GL_RGBA_INTEGER -> VK_FORMAT_R8G8B8A8_SINT
    GL_BGRA_INTEGER -> VK_FORMAT_B8G8R8A8_SINT
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  --
  -- 16 bits per component
  --
  GL_UNSIGNED_SHORT -> \case
    GL_RED -> VK_FORMAT_R16_UNORM
    GL_RG -> VK_FORMAT_R16G16_UNORM
    GL_RGB -> VK_FORMAT_R16G16B16_UNORM
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R16G16B16A16_UNORM
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_R16_UINT
    GL_RG_INTEGER -> VK_FORMAT_R16G16_UINT
    GL_RGB_INTEGER -> VK_FORMAT_R16G16B16_UINT
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_R16G16B16A16_UINT
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_D16_UNORM
    GL_DEPTH_STENCIL -> VK_FORMAT_D16_UNORM_S8_UINT
    _ -> VK_FORMAT_UNDEFINED

  GL_SHORT -> \case
    GL_RED -> VK_FORMAT_R16_SNORM
    GL_RG -> VK_FORMAT_R16G16_SNORM
    GL_RGB -> VK_FORMAT_R16G16B16_SNORM
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R16G16B16A16_SNORM
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_R16_SINT
    GL_RG_INTEGER -> VK_FORMAT_R16G16_SINT
    GL_RGB_INTEGER -> VK_FORMAT_R16G16B16_SINT
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_R16G16B16A16_SINT
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  x | x `elem` [
      GL_HALF_FLOAT,
      GL_HALF_FLOAT_OES
    ] -> \case
    GL_RED -> VK_FORMAT_R16_SFLOAT
    GL_RG -> VK_FORMAT_R16G16_SFLOAT
    GL_RGB -> VK_FORMAT_R16G16B16_SFLOAT
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R16G16B16A16_SFLOAT
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RG_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGB_INTEGER -> VK_FORMAT_UNDEFINED
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  --
  -- 32 bits per component
  --
  GL_UNSIGNED_INT -> \case
    GL_RED -> VK_FORMAT_R32_UINT
    GL_RG -> VK_FORMAT_R32G32_UINT
    GL_RGB -> VK_FORMAT_R32G32B32_UINT
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R32G32B32A32_UINT
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_R32_UINT
    GL_RG_INTEGER -> VK_FORMAT_R32G32_UINT
    GL_RGB_INTEGER -> VK_FORMAT_R32G32B32_UINT
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_R32G32B32A32_UINT
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_X8_D24_UNORM_PACK32
    GL_DEPTH_STENCIL -> VK_FORMAT_D24_UNORM_S8_UINT
    _ -> VK_FORMAT_UNDEFINED

  GL_INT -> \case
    GL_RED -> VK_FORMAT_R32_SINT
    GL_RG -> VK_FORMAT_R32G32_SINT
    GL_RGB -> VK_FORMAT_R32G32B32_SINT
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R32G32B32A32_SINT
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_R32_SINT
    GL_RG_INTEGER -> VK_FORMAT_R32G32_SINT
    GL_RGB_INTEGER -> VK_FORMAT_R32G32B32_SINT
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_R32G32B32A32_SINT
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  GL_FLOAT -> \case
    GL_RED -> VK_FORMAT_R32_SFLOAT
    GL_RG -> VK_FORMAT_R32G32_SFLOAT
    GL_RGB -> VK_FORMAT_R32G32B32_SFLOAT
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R32G32B32A32_SFLOAT
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RG_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGB_INTEGER -> VK_FORMAT_UNDEFINED
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_D32_SFLOAT
    GL_DEPTH_STENCIL -> VK_FORMAT_D32_SFLOAT_S8_UINT
    _ -> VK_FORMAT_UNDEFINED

  --
  -- 64 bits per component
  --
  GL_UNSIGNED_INT64 -> \case
    GL_RED -> VK_FORMAT_R64_UINT
    GL_RG -> VK_FORMAT_R64G64_UINT
    GL_RGB -> VK_FORMAT_R64G64B64_UINT
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R64G64B64A64_UINT
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RG_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGB_INTEGER -> VK_FORMAT_UNDEFINED
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  GL_INT64 -> \case
    GL_RED -> VK_FORMAT_R64_SINT
    GL_RG -> VK_FORMAT_R64G64_SINT
    GL_RGB -> VK_FORMAT_R64G64B64_SINT
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R64G64B64A64_SINT
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_R64_SINT
    GL_RG_INTEGER -> VK_FORMAT_R64G64_SINT
    GL_RGB_INTEGER -> VK_FORMAT_R64G64B64_SINT
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_R64G64B64A64_SINT
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  GL_DOUBLE -> \case
    GL_RED -> VK_FORMAT_R64_SFLOAT
    GL_RG -> VK_FORMAT_R64G64_SFLOAT
    GL_RGB -> VK_FORMAT_R64G64B64_SFLOAT
    GL_BGR -> VK_FORMAT_UNDEFINED
    GL_RGBA -> VK_FORMAT_R64G64B64A64_SFLOAT
    GL_BGRA -> VK_FORMAT_UNDEFINED
    GL_RED_INTEGER -> VK_FORMAT_R64_SFLOAT
    GL_RG_INTEGER -> VK_FORMAT_R64G64_SFLOAT
    GL_RGB_INTEGER -> VK_FORMAT_R64G64B64_SFLOAT
    GL_BGR_INTEGER -> VK_FORMAT_UNDEFINED
    GL_RGBA_INTEGER -> VK_FORMAT_R64G64B64A64_SFLOAT
    GL_BGRA_INTEGER -> VK_FORMAT_UNDEFINED
    GL_STENCIL_INDEX -> VK_FORMAT_UNDEFINED
    GL_DEPTH_COMPONENT -> VK_FORMAT_UNDEFINED
    GL_DEPTH_STENCIL -> VK_FORMAT_UNDEFINED
    _ -> VK_FORMAT_UNDEFINED

  --
  -- Packed
  --
  GL_UNSIGNED_BYTE_3_3_2 -> \format ->
    assert (format `elem` [GL_RGB, GL_RGB_INTEGER]) $
    VK_FORMAT_UNDEFINED
  GL_UNSIGNED_BYTE_2_3_3_REV -> \format ->
    assert (format `elem` [GL_BGR, GL_BGR_INTEGER]) $
    VK_FORMAT_UNDEFINED
  GL_UNSIGNED_SHORT_5_6_5 -> \format ->
    assert (format `elem` [GL_RGB, GL_RGB_INTEGER]) $
    VK_FORMAT_R5G6B5_UNORM_PACK16
  GL_UNSIGNED_SHORT_5_6_5_REV -> \format ->
    assert (format `elem` [GL_BGR, GL_BGR_INTEGER]) $
    VK_FORMAT_B5G6R5_UNORM_PACK16
  GL_UNSIGNED_SHORT_4_4_4_4 -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    VK_FORMAT_R4G4B4A4_UNORM_PACK16
  GL_UNSIGNED_SHORT_4_4_4_4_REV -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    VK_FORMAT_B4G4R4A4_UNORM_PACK16
  GL_UNSIGNED_SHORT_5_5_5_1 -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    VK_FORMAT_R5G5B5A1_UNORM_PACK16
  GL_UNSIGNED_SHORT_1_5_5_5_REV -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    VK_FORMAT_A1R5G5B5_UNORM_PACK16
  GL_UNSIGNED_INT_8_8_8_8 -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    if format `elem` [GL_RGB_INTEGER, GL_BGRA_INTEGER] then VK_FORMAT_R8G8B8A8_UINT else VK_FORMAT_R8G8B8A8_UNORM
  GL_UNSIGNED_INT_8_8_8_8_REV -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    if format `elem` [GL_RGB_INTEGER, GL_BGRA_INTEGER] then VK_FORMAT_A8B8G8R8_UINT_PACK32 else VK_FORMAT_A8B8G8R8_UNORM_PACK32
  GL_UNSIGNED_INT_10_10_10_2 -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    if format `elem` [GL_RGB_INTEGER, GL_BGRA_INTEGER] then VK_FORMAT_A2R10G10B10_UINT_PACK32 else VK_FORMAT_A2R10G10B10_UNORM_PACK32
  GL_UNSIGNED_INT_2_10_10_10_REV -> \format ->
    assert (format `elem` [GL_RGB, GL_BGRA, GL_RGB_INTEGER, GL_BGRA_INTEGER]) $
    if format `elem` [GL_RGB_INTEGER, GL_BGRA_INTEGER] then VK_FORMAT_A2B10G10R10_UINT_PACK32 else VK_FORMAT_A2B10G10R10_UNORM_PACK32
  GL_UNSIGNED_INT_10F_11F_11F_REV -> \format ->
    assert (format `elem` [GL_RGB, GL_BGR]) $
    VK_FORMAT_B10G11R11_UFLOAT_PACK32
  GL_UNSIGNED_INT_5_9_9_9_REV -> \format ->
    assert (format `elem` [GL_RGB, GL_BGR]) $
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
  GL_UNSIGNED_INT_24_8 -> \format ->
    assert (format `elem` [GL_DEPTH_STENCIL]) $
    VK_FORMAT_D24_UNORM_S8_UINT
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV -> \format ->
    assert (format == GL_DEPTH_STENCIL) $
    VK_FORMAT_D32_SFLOAT_S8_UINT

  _ -> const VK_FORMAT_UNDEFINED

getVkFormatFromGlType ::
  (GlEnum g, VkFormat v, Num n, Eq n) =>
  g -> -- GL type
  n -> -- # components
  Bool -> -- is normalized?
  v
getVkFormatFromGlType = \case
  --
  -- 8 bits per component
  --
  GL_UNSIGNED_BYTE -> \case
    1 -> \case
      True -> VK_FORMAT_R8_UNORM
      False -> VK_FORMAT_R8_UINT
    2 -> \case
      True -> VK_FORMAT_R8G8_UNORM
      False -> VK_FORMAT_R8G8_UINT
    3 -> \case
      True -> VK_FORMAT_R8G8B8_UNORM
      False -> VK_FORMAT_R8G8B8_UINT
    4 -> \case
      True -> VK_FORMAT_R8G8B8A8_UNORM
      False -> VK_FORMAT_R8G8B8A8_UINT
    _ -> const VK_FORMAT_UNDEFINED
  GL_BYTE -> \case
    1 -> \case
      True -> VK_FORMAT_R8_SNORM
      False -> VK_FORMAT_R8_SINT
    2 -> \case
      True -> VK_FORMAT_R8G8_SNORM
      False -> VK_FORMAT_R8G8_SINT
    3 -> \case
      True -> VK_FORMAT_R8G8B8_SNORM
      False -> VK_FORMAT_R8G8B8_SINT
    4 -> \case
      True -> VK_FORMAT_R8G8B8A8_SNORM
      False -> VK_FORMAT_R8G8B8A8_SINT
    _ -> const VK_FORMAT_UNDEFINED

  --
  -- 16 bits per component
  --
  GL_UNSIGNED_SHORT -> \case
    1 -> \case
      True -> VK_FORMAT_R16_UNORM
      False -> VK_FORMAT_R16_UINT
    2 -> \case
      True -> VK_FORMAT_R16G16_UNORM
      False -> VK_FORMAT_R16G16_UINT
    3 -> \case
      True -> VK_FORMAT_R16G16B16_UNORM
      False -> VK_FORMAT_R16G16B16_UINT
    4 -> \case
      True -> VK_FORMAT_R16G16B16A16_UNORM
      False -> VK_FORMAT_R16G16B16A16_UINT
    _ -> const VK_FORMAT_UNDEFINED
  GL_SHORT -> \case
    1 -> \case
      True -> VK_FORMAT_R16_SNORM
      False -> VK_FORMAT_R16_SINT
    2 -> \case
      True -> VK_FORMAT_R16G16_SNORM
      False -> VK_FORMAT_R16G16_SINT
    3 -> \case
      True -> VK_FORMAT_R16G16B16_SNORM
      False -> VK_FORMAT_R16G16B16_SINT
    4 -> \case
      True -> VK_FORMAT_R16G16B16A16_SNORM
      False -> VK_FORMAT_R16G16B16A16_SINT
    _ -> const VK_FORMAT_UNDEFINED
  x | x `elem` [
      GL_HALF_FLOAT,
      GL_HALF_FLOAT_OES
    ] -> \case
    1 -> const VK_FORMAT_R16_SFLOAT
    2 -> const VK_FORMAT_R16G16_SFLOAT
    3 -> const VK_FORMAT_R16G16B16_SFLOAT
    4 -> const VK_FORMAT_R16G16B16A16_SFLOAT
    _ -> const VK_FORMAT_UNDEFINED

  --
  -- 32 bits per component
  --
  GL_UNSIGNED_INT -> \case
    1 -> const VK_FORMAT_R32_UINT
    2 -> const VK_FORMAT_R32G32_UINT
    3 -> const VK_FORMAT_R32G32B32_UINT
    4 -> const VK_FORMAT_R32G32B32A32_UINT
    _ -> const VK_FORMAT_UNDEFINED
  GL_INT -> \case
    1 -> const VK_FORMAT_R32_SINT
    2 -> const VK_FORMAT_R32G32_SINT
    3 -> const VK_FORMAT_R32G32B32_SINT
    4 -> const VK_FORMAT_R32G32B32A32_SINT
    _ -> const VK_FORMAT_UNDEFINED
  GL_FLOAT -> \case
    1 -> const VK_FORMAT_R32_SFLOAT
    2 -> const VK_FORMAT_R32G32_SFLOAT
    3 -> const VK_FORMAT_R32G32B32_SFLOAT
    4 -> const VK_FORMAT_R32G32B32A32_SFLOAT
    _ -> const VK_FORMAT_UNDEFINED

  --
  -- 64 bits per component
  --
  GL_UNSIGNED_INT64 -> \case
    1 -> const VK_FORMAT_R64_UINT
    2 -> const VK_FORMAT_R64G64_UINT
    3 -> const VK_FORMAT_R64G64B64_UINT
    4 -> const VK_FORMAT_R64G64B64A64_UINT
    _ -> const VK_FORMAT_UNDEFINED
  GL_INT64 -> \case
    1 -> const VK_FORMAT_R64_SINT
    2 -> const VK_FORMAT_R64G64_SINT
    3 -> const VK_FORMAT_R64G64B64_SINT
    4 -> const VK_FORMAT_R64G64B64A64_SINT
    _ -> const VK_FORMAT_UNDEFINED
  GL_DOUBLE -> \case
    1 -> const VK_FORMAT_R64_SFLOAT
    2 -> const VK_FORMAT_R64G64_SFLOAT
    3 -> const VK_FORMAT_R64G64B64_SFLOAT
    4 -> const VK_FORMAT_R64G64B64A64_SFLOAT
    _ -> const VK_FORMAT_UNDEFINED

  --
  -- Packed
  --
  GL_UNSIGNED_BYTE_3_3_2 -> const . const $ VK_FORMAT_UNDEFINED
  GL_UNSIGNED_BYTE_2_3_3_REV -> const . const $ VK_FORMAT_UNDEFINED
  GL_UNSIGNED_SHORT_5_6_5 -> const . const $ VK_FORMAT_R5G6B5_UNORM_PACK16
  GL_UNSIGNED_SHORT_5_6_5_REV -> const . const $ VK_FORMAT_B5G6R5_UNORM_PACK16
  GL_UNSIGNED_SHORT_4_4_4_4 -> const . const $ VK_FORMAT_R4G4B4A4_UNORM_PACK16
  GL_UNSIGNED_SHORT_4_4_4_4_REV -> const . const $ VK_FORMAT_B4G4R4A4_UNORM_PACK16
  GL_UNSIGNED_SHORT_5_5_5_1 -> const . const $ VK_FORMAT_R5G5B5A1_UNORM_PACK16
  GL_UNSIGNED_SHORT_1_5_5_5_REV -> const . const $ VK_FORMAT_A1R5G5B5_UNORM_PACK16
  GL_UNSIGNED_INT_8_8_8_8 -> const $ \case
    True -> VK_FORMAT_R8G8B8A8_UNORM
    False -> VK_FORMAT_R8G8B8A8_UINT
  GL_UNSIGNED_INT_8_8_8_8_REV -> const $ \case
    True -> VK_FORMAT_A8B8G8R8_UNORM_PACK32
    False -> VK_FORMAT_A8B8G8R8_UINT_PACK32
  GL_UNSIGNED_INT_10_10_10_2 -> const $ \case
    True -> VK_FORMAT_A2R10G10B10_UNORM_PACK32
    False -> VK_FORMAT_A2R10G10B10_UINT_PACK32
  GL_UNSIGNED_INT_2_10_10_10_REV -> const $ \case
    True -> VK_FORMAT_A2B10G10R10_UNORM_PACK32
    False -> VK_FORMAT_A2B10G10R10_UINT_PACK32
  GL_UNSIGNED_INT_10F_11F_11F_REV -> const . const $ VK_FORMAT_B10G11R11_UFLOAT_PACK32
  GL_UNSIGNED_INT_5_9_9_9_REV -> const . const $ VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
  GL_UNSIGNED_INT_24_8 -> const . const $ VK_FORMAT_D24_UNORM_S8_UINT
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV -> const . const $ VK_FORMAT_D32_SFLOAT_S8_UINT

  _ -> const . const $ VK_FORMAT_UNDEFINED

getVkFormatFromGlInternalFormat :: (GlEnum g, VkFormat v) => g -> v
getVkFormatFromGlInternalFormat = \case

  --
  -- 8 bits per component
  --
  GL_R8 -> VK_FORMAT_R8_UNORM -- 1-component, 8-bit unsigned normalized
  GL_RG8 -> VK_FORMAT_R8G8_UNORM -- 2-component, 8-bit unsigned normalized
  GL_RGB8 -> VK_FORMAT_R8G8B8_UNORM -- 3-component, 8-bit unsigned normalized
  GL_RGBA8 -> VK_FORMAT_R8G8B8A8_UNORM -- 4-component, 8-bit unsigned normalized

  GL_R8_SNORM -> VK_FORMAT_R8_SNORM -- 1-component, 8-bit signed normalized
  GL_RG8_SNORM -> VK_FORMAT_R8G8_SNORM -- 2-component, 8-bit signed normalized
  GL_RGB8_SNORM -> VK_FORMAT_R8G8B8_SNORM -- 3-component, 8-bit signed normalized
  GL_RGBA8_SNORM -> VK_FORMAT_R8G8B8A8_SNORM -- 4-component, 8-bit signed normalized

  GL_R8UI -> VK_FORMAT_R8_UINT -- 1-component, 8-bit unsigned integer
  GL_RG8UI -> VK_FORMAT_R8G8_UINT -- 2-component, 8-bit unsigned integer
  GL_RGB8UI -> VK_FORMAT_R8G8B8_UINT -- 3-component, 8-bit unsigned integer
  GL_RGBA8UI -> VK_FORMAT_R8G8B8A8_UINT -- 4-component, 8-bit unsigned integer

  GL_R8I -> VK_FORMAT_R8_SINT -- 1-component, 8-bit signed integer
  GL_RG8I -> VK_FORMAT_R8G8_SINT -- 2-component, 8-bit signed integer
  GL_RGB8I -> VK_FORMAT_R8G8B8_SINT -- 3-component, 8-bit signed integer
  GL_RGBA8I -> VK_FORMAT_R8G8B8A8_SINT -- 4-component, 8-bit signed integer

  GL_SR8 -> VK_FORMAT_R8_SRGB -- 1-component, 8-bit sRGB
  GL_SRG8 -> VK_FORMAT_R8G8_SRGB -- 2-component, 8-bit sRGB
  GL_SRGB8 -> VK_FORMAT_R8G8B8_SRGB -- 3-component, 8-bit sRGB
  GL_SRGB8_ALPHA8 -> VK_FORMAT_R8G8B8A8_SRGB -- 4-component, 8-bit sRGB

  --
  -- 16 bits per component
  --
  GL_R16 -> VK_FORMAT_R16_UNORM -- 1-component, 16-bit unsigned normalized
  GL_RG16 -> VK_FORMAT_R16G16_UNORM -- 2-component, 16-bit unsigned normalized
  GL_RGB16 -> VK_FORMAT_R16G16B16_UNORM -- 3-component, 16-bit unsigned normalized
  GL_RGBA16 -> VK_FORMAT_R16G16B16A16_UNORM -- 4-component, 16-bit unsigned normalized

  GL_R16_SNORM -> VK_FORMAT_R16_SNORM -- 1-component, 16-bit signed normalized
  GL_RG16_SNORM -> VK_FORMAT_R16G16_SNORM -- 2-component, 16-bit signed normalized
  GL_RGB16_SNORM -> VK_FORMAT_R16G16B16_SNORM -- 3-component, 16-bit signed normalized
  GL_RGBA16_SNORM -> VK_FORMAT_R16G16B16A16_SNORM -- 4-component, 16-bit signed normalized

  GL_R16UI -> VK_FORMAT_R16_UINT -- 1-component, 16-bit unsigned integer
  GL_RG16UI -> VK_FORMAT_R16G16_UINT -- 2-component, 16-bit unsigned integer
  GL_RGB16UI -> VK_FORMAT_R16G16B16_UINT -- 3-component, 16-bit unsigned integer
  GL_RGBA16UI -> VK_FORMAT_R16G16B16A16_UINT -- 4-component, 16-bit unsigned integer

  GL_R16I -> VK_FORMAT_R16_SINT -- 1-component, 16-bit signed integer
  GL_RG16I -> VK_FORMAT_R16G16_SINT -- 2-component, 16-bit signed integer
  GL_RGB16I -> VK_FORMAT_R16G16B16_SINT -- 3-component, 16-bit signed integer
  GL_RGBA16I -> VK_FORMAT_R16G16B16A16_SINT -- 4-component, 16-bit signed integer

  GL_R16F -> VK_FORMAT_R16_SFLOAT -- 1-component, 16-bit floating-point
  GL_RG16F -> VK_FORMAT_R16G16_SFLOAT -- 2-component, 16-bit floating-point
  GL_RGB16F -> VK_FORMAT_R16G16B16_SFLOAT -- 3-component, 16-bit floating-point
  GL_RGBA16F -> VK_FORMAT_R16G16B16A16_SFLOAT -- 4-component, 16-bit floating-point

  --
  -- 32 bits per component
  --
  GL_R32UI -> VK_FORMAT_R32_UINT -- 1-component, 32-bit unsigned integer
  GL_RG32UI -> VK_FORMAT_R32G32_UINT -- 2-component, 32-bit unsigned integer
  GL_RGB32UI -> VK_FORMAT_R32G32B32_UINT -- 3-component, 32-bit unsigned integer
  GL_RGBA32UI -> VK_FORMAT_R32G32B32A32_UINT -- 4-component, 32-bit unsigned integer

  GL_R32I -> VK_FORMAT_R32_SINT -- 1-component, 32-bit signed integer
  GL_RG32I -> VK_FORMAT_R32G32_SINT -- 2-component, 32-bit signed integer
  GL_RGB32I -> VK_FORMAT_R32G32B32_SINT -- 3-component, 32-bit signed integer
  GL_RGBA32I -> VK_FORMAT_R32G32B32A32_SINT -- 4-component, 32-bit signed integer

  GL_R32F -> VK_FORMAT_R32_SFLOAT -- 1-component, 32-bit floating-point
  GL_RG32F -> VK_FORMAT_R32G32_SFLOAT -- 2-component, 32-bit floating-point
  GL_RGB32F -> VK_FORMAT_R32G32B32_SFLOAT -- 3-component, 32-bit floating-point
  GL_RGBA32F -> VK_FORMAT_R32G32B32A32_SFLOAT -- 4-component, 32-bit floating-point

  --
  -- Packed
  --
  GL_R3_G3_B2 -> VK_FORMAT_UNDEFINED -- 3-component 3:3:2,       unsigned normalized
  GL_RGB4 -> VK_FORMAT_UNDEFINED -- 3-component 4:4:4,       unsigned normalized
  GL_RGB5 -> VK_FORMAT_R5G5B5A1_UNORM_PACK16 -- 3-component 5:5:5,       unsigned normalized
  GL_RGB565 -> VK_FORMAT_R5G6B5_UNORM_PACK16 -- 3-component 5:6:5,       unsigned normalized
  GL_RGB10 -> VK_FORMAT_A2R10G10B10_UNORM_PACK32 -- 3-component 10:10:10,    unsigned normalized
  GL_RGB12 -> VK_FORMAT_UNDEFINED -- 3-component 12:12:12,    unsigned normalized
  GL_RGBA2 -> VK_FORMAT_UNDEFINED -- 4-component 2:2:2:2,     unsigned normalized
  GL_RGBA4 -> VK_FORMAT_R4G4B4A4_UNORM_PACK16 -- 4-component 4:4:4:4,     unsigned normalized
  GL_RGBA12 -> VK_FORMAT_UNDEFINED -- 4-component 12:12:12:12, unsigned normalized
  GL_RGB5_A1 -> VK_FORMAT_A1R5G5B5_UNORM_PACK16 -- 4-component 5:5:5:1,     unsigned normalized
  GL_RGB10_A2 -> VK_FORMAT_A2R10G10B10_UNORM_PACK32 -- 4-component 10:10:10:2,  unsigned normalized
  GL_RGB10_A2UI -> VK_FORMAT_A2R10G10B10_UINT_PACK32 -- 4-component 10:10:10:2,  unsigned integer
  GL_R11F_G11F_B10F -> VK_FORMAT_B10G11R11_UFLOAT_PACK32 -- 3-component 11:11:10,    floating-point
  GL_RGB9_E5 -> VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 -- 3-component/exp 9:9:9/5, floating-point

  --
  -- S3TC/DXT/BC
  --
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT -> VK_FORMAT_BC1_RGB_UNORM_BLOCK -- line through 3D space, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT -> VK_FORMAT_BC1_RGBA_UNORM_BLOCK -- line through 3D space plus 1-bit alpha, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT -> VK_FORMAT_BC2_UNORM_BLOCK -- line through 3D space plus line through 1D space, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT -> VK_FORMAT_BC3_UNORM_BLOCK -- line through 3D space plus 4-bit alpha, 4x4 blocks, unsigned normalized

  GL_COMPRESSED_SRGB_S3TC_DXT1_EXT -> VK_FORMAT_BC1_RGB_SRGB_BLOCK -- line through 3D space, 4x4 blocks, sRGB
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT -> VK_FORMAT_BC1_RGBA_SRGB_BLOCK -- line through 3D space plus 1-bit alpha, 4x4 blocks, sRGB
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT -> VK_FORMAT_BC2_SRGB_BLOCK -- line through 3D space plus line through 1D space, 4x4 blocks, sRGB
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT -> VK_FORMAT_BC3_SRGB_BLOCK -- line through 3D space plus 4-bit alpha, 4x4 blocks, sRGB

  GL_COMPRESSED_LUMINANCE_LATC1_EXT -> VK_FORMAT_BC4_UNORM_BLOCK -- line through 1D space, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT -> VK_FORMAT_BC5_UNORM_BLOCK -- two lines through 1D space, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT -> VK_FORMAT_BC4_SNORM_BLOCK -- line through 1D space, 4x4 blocks, signed normalized
  GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT -> VK_FORMAT_BC5_SNORM_BLOCK -- two lines through 1D space, 4x4 blocks, signed normalized

  GL_COMPRESSED_RED_RGTC1 -> VK_FORMAT_BC4_UNORM_BLOCK -- line through 1D space, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RG_RGTC2 -> VK_FORMAT_BC5_UNORM_BLOCK -- two lines through 1D space, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_SIGNED_RED_RGTC1 -> VK_FORMAT_BC4_SNORM_BLOCK -- line through 1D space, 4x4 blocks, signed normalized
  GL_COMPRESSED_SIGNED_RG_RGTC2 -> VK_FORMAT_BC5_SNORM_BLOCK -- two lines through 1D space, 4x4 blocks, signed normalized

  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT -> VK_FORMAT_BC6H_UFLOAT_BLOCK -- 3-component, 4x4 blocks, unsigned floating-point
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT -> VK_FORMAT_BC6H_SFLOAT_BLOCK -- 3-component, 4x4 blocks, signed floating-point
  GL_COMPRESSED_RGBA_BPTC_UNORM -> VK_FORMAT_BC7_UNORM_BLOCK -- 4-component, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM -> VK_FORMAT_BC7_SRGB_BLOCK -- 4-component, 4x4 blocks, sRGB

  --
  -- ETC
  --
  GL_ETC1_RGB8_OES -> VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK -- 3-component ETC1, 4x4 blocks, unsigned normalized

  GL_COMPRESSED_RGB8_ETC2 -> VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK -- 3-component ETC2, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 -> VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK -- 4-component ETC2 with 1-bit alpha, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA8_ETC2_EAC -> VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK -- 4-component ETC2, 4x4 blocks, unsigned normalized

  GL_COMPRESSED_SRGB8_ETC2 -> VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK -- 3-component ETC2, 4x4 blocks, sRGB
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 -> VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK -- 4-component ETC2 with 1-bit alpha, 4x4 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC -> VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK -- 4-component ETC2, 4x4 blocks, sRGB

  GL_COMPRESSED_R11_EAC -> VK_FORMAT_EAC_R11_UNORM_BLOCK -- 1-component ETC, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RG11_EAC -> VK_FORMAT_EAC_R11G11_UNORM_BLOCK -- 2-component ETC, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_SIGNED_R11_EAC -> VK_FORMAT_EAC_R11_SNORM_BLOCK -- 1-component ETC, 4x4 blocks, signed normalized
  GL_COMPRESSED_SIGNED_RG11_EAC -> VK_FORMAT_EAC_R11G11_SNORM_BLOCK -- 2-component ETC, 4x4 blocks, signed normalized

  --
  -- PVRTC
  --
  GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG -> VK_FORMAT_UNDEFINED -- 3-component PVRTC, 16x8 blocks, unsigned normalized
  GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG -> VK_FORMAT_UNDEFINED -- 3-component PVRTC,  8x8 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG -> VK_FORMAT_UNDEFINED -- 4-component PVRTC, 16x8 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG -> VK_FORMAT_UNDEFINED -- 4-component PVRTC,  8x8 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG -> VK_FORMAT_UNDEFINED -- 4-component PVRTC,  8x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG -> VK_FORMAT_UNDEFINED -- 4-component PVRTC,  4x4 blocks, unsigned normalized

  GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT -> VK_FORMAT_UNDEFINED -- 3-component PVRTC, 16x8 blocks, sRGB
  GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT -> VK_FORMAT_UNDEFINED -- 3-component PVRTC,  8x8 blocks, sRGB
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT -> VK_FORMAT_UNDEFINED -- 4-component PVRTC, 16x8 blocks, sRGB
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT -> VK_FORMAT_UNDEFINED -- 4-component PVRTC,  8x8 blocks, sRGB
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG -> VK_FORMAT_UNDEFINED -- 4-component PVRTC,  8x4 blocks, sRGB
  GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG -> VK_FORMAT_UNDEFINED -- 4-component PVRTC,  4x4 blocks, sRGB

  --
  -- ASTC
  --
  GL_COMPRESSED_RGBA_ASTC_4x4_KHR -> VK_FORMAT_ASTC_4x4_UNORM_BLOCK -- 4-component ASTC, 4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_5x4_KHR -> VK_FORMAT_ASTC_5x4_UNORM_BLOCK -- 4-component ASTC, 5x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_5x5_KHR -> VK_FORMAT_ASTC_5x5_UNORM_BLOCK -- 4-component ASTC, 5x5 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_6x5_KHR -> VK_FORMAT_ASTC_6x5_UNORM_BLOCK -- 4-component ASTC, 6x5 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_6x6_KHR -> VK_FORMAT_ASTC_6x6_UNORM_BLOCK -- 4-component ASTC, 6x6 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_8x5_KHR -> VK_FORMAT_ASTC_8x5_UNORM_BLOCK -- 4-component ASTC, 8x5 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_8x6_KHR -> VK_FORMAT_ASTC_8x6_UNORM_BLOCK -- 4-component ASTC, 8x6 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_8x8_KHR -> VK_FORMAT_ASTC_8x8_UNORM_BLOCK -- 4-component ASTC, 8x8 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_10x5_KHR -> VK_FORMAT_ASTC_10x5_UNORM_BLOCK -- 4-component ASTC, 10x5 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_10x6_KHR -> VK_FORMAT_ASTC_10x6_UNORM_BLOCK -- 4-component ASTC, 10x6 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_10x8_KHR -> VK_FORMAT_ASTC_10x8_UNORM_BLOCK -- 4-component ASTC, 10x8 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_10x10_KHR -> VK_FORMAT_ASTC_10x10_UNORM_BLOCK -- 4-component ASTC, 10x10 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_12x10_KHR -> VK_FORMAT_ASTC_12x10_UNORM_BLOCK -- 4-component ASTC, 12x10 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_12x12_KHR -> VK_FORMAT_ASTC_12x12_UNORM_BLOCK -- 4-component ASTC, 12x12 blocks, unsigned normalized

  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR -> VK_FORMAT_ASTC_4x4_SRGB_BLOCK -- 4-component ASTC, 4x4 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR -> VK_FORMAT_ASTC_5x4_SRGB_BLOCK -- 4-component ASTC, 5x4 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR -> VK_FORMAT_ASTC_5x5_SRGB_BLOCK -- 4-component ASTC, 5x5 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR -> VK_FORMAT_ASTC_6x5_SRGB_BLOCK -- 4-component ASTC, 6x5 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR -> VK_FORMAT_ASTC_6x6_SRGB_BLOCK -- 4-component ASTC, 6x6 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR -> VK_FORMAT_ASTC_8x5_SRGB_BLOCK -- 4-component ASTC, 8x5 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR -> VK_FORMAT_ASTC_8x6_SRGB_BLOCK -- 4-component ASTC, 8x6 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR -> VK_FORMAT_ASTC_8x8_SRGB_BLOCK -- 4-component ASTC, 8x8 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR -> VK_FORMAT_ASTC_10x5_SRGB_BLOCK -- 4-component ASTC, 10x5 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR -> VK_FORMAT_ASTC_10x6_SRGB_BLOCK -- 4-component ASTC, 10x6 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR -> VK_FORMAT_ASTC_10x8_SRGB_BLOCK -- 4-component ASTC, 10x8 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR -> VK_FORMAT_ASTC_10x10_SRGB_BLOCK -- 4-component ASTC, 10x10 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR -> VK_FORMAT_ASTC_12x10_SRGB_BLOCK -- 4-component ASTC, 12x10 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR -> VK_FORMAT_ASTC_12x12_SRGB_BLOCK -- 4-component ASTC, 12x12 blocks, sRGB

  GL_COMPRESSED_RGBA_ASTC_3x3x3_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 3x3x3 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_4x3x3_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 4x3x3 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_4x4x3_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 4x4x3 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_4x4x4_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 4x4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_5x4x4_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 5x4x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_5x5x4_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 5x5x4 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_5x5x5_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 5x5x5 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_6x5x5_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 6x5x5 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_6x6x5_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 6x6x5 blocks, unsigned normalized
  GL_COMPRESSED_RGBA_ASTC_6x6x6_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 6x6x6 blocks, unsigned normalized

  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 3x3x3 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 4x3x3 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 4x4x3 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 4x4x4 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 5x4x4 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 5x5x4 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 5x5x5 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 6x5x5 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 6x6x5 blocks, sRGB
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES -> VK_FORMAT_UNDEFINED -- 4-component ASTC, 6x6x6 blocks, sRGB

  --
  -- ATC
  --
  GL_ATC_RGB_AMD -> VK_FORMAT_UNDEFINED -- 3-component, 4x4 blocks, unsigned normalized
  GL_ATC_RGBA_EXPLICIT_ALPHA_AMD -> VK_FORMAT_UNDEFINED -- 4-component, 4x4 blocks, unsigned normalized
  GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD -> VK_FORMAT_UNDEFINED -- 4-component, 4x4 blocks, unsigned normalized

  --
  -- Palletized
  --
  GL_PALETTE4_RGB8_OES -> VK_FORMAT_UNDEFINED -- 3-component 8:8:8,   4-bit palette, unsigned normalized
  GL_PALETTE4_RGBA8_OES -> VK_FORMAT_UNDEFINED -- 4-component 8:8:8:8, 4-bit palette, unsigned normalized
  GL_PALETTE4_R5_G6_B5_OES -> VK_FORMAT_UNDEFINED -- 3-component 5:6:5,   4-bit palette, unsigned normalized
  GL_PALETTE4_RGBA4_OES -> VK_FORMAT_UNDEFINED -- 4-component 4:4:4:4, 4-bit palette, unsigned normalized
  GL_PALETTE4_RGB5_A1_OES -> VK_FORMAT_UNDEFINED -- 4-component 5:5:5:1, 4-bit palette, unsigned normalized
  GL_PALETTE8_RGB8_OES -> VK_FORMAT_UNDEFINED -- 3-component 8:8:8,   8-bit palette, unsigned normalized
  GL_PALETTE8_RGBA8_OES -> VK_FORMAT_UNDEFINED -- 4-component 8:8:8:8, 8-bit palette, unsigned normalized
  GL_PALETTE8_R5_G6_B5_OES -> VK_FORMAT_UNDEFINED -- 3-component 5:6:5,   8-bit palette, unsigned normalized
  GL_PALETTE8_RGBA4_OES -> VK_FORMAT_UNDEFINED -- 4-component 4:4:4:4, 8-bit palette, unsigned normalized
  GL_PALETTE8_RGB5_A1_OES -> VK_FORMAT_UNDEFINED -- 4-component 5:5:5:1, 8-bit palette, unsigned normalized

  --
  -- Depth/stencil
  --
  GL_DEPTH_COMPONENT16 -> VK_FORMAT_D16_UNORM
  GL_DEPTH_COMPONENT24 -> VK_FORMAT_X8_D24_UNORM_PACK32
  GL_DEPTH_COMPONENT32 -> VK_FORMAT_UNDEFINED
  GL_DEPTH_COMPONENT32F -> VK_FORMAT_D32_SFLOAT
  GL_DEPTH_COMPONENT32F_NV -> VK_FORMAT_D32_SFLOAT
  GL_STENCIL_INDEX1 -> VK_FORMAT_UNDEFINED
  GL_STENCIL_INDEX4 -> VK_FORMAT_UNDEFINED
  GL_STENCIL_INDEX8 -> VK_FORMAT_S8_UINT
  GL_STENCIL_INDEX16 -> VK_FORMAT_UNDEFINED
  GL_DEPTH24_STENCIL8 -> VK_FORMAT_D24_UNORM_S8_UINT
  GL_DEPTH32F_STENCIL8 -> VK_FORMAT_D32_SFLOAT_S8_UINT
  GL_DEPTH32F_STENCIL8_NV -> VK_FORMAT_D32_SFLOAT_S8_UINT

  _ -> VK_FORMAT_UNDEFINED

type VkFormatSizeFlags = Word32

pattern VK_FORMAT_SIZE_PACKED_BIT :: VkFormatSizeFlags
pattern VK_FORMAT_SIZE_PACKED_BIT = 0x01
pattern VK_FORMAT_SIZE_COMPRESSED_BIT :: VkFormatSizeFlags
pattern VK_FORMAT_SIZE_COMPRESSED_BIT = 0x02
pattern VK_FORMAT_SIZE_PALETTIZED_BIT :: VkFormatSizeFlags
pattern VK_FORMAT_SIZE_PALETTIZED_BIT = 0x04
pattern VK_FORMAT_SIZE_DEPTH_BIT :: VkFormatSizeFlags
pattern VK_FORMAT_SIZE_DEPTH_BIT = 0x08
pattern VK_FORMAT_SIZE_STENCIL_BIT :: VkFormatSizeFlags
pattern VK_FORMAT_SIZE_STENCIL_BIT = 0x10

data VkFormatSize s =
  VkFormatSize {
    vkFormatSize'flags :: GlFormatSizeFlags,
    vkFormatSize'paletteSizeInBits :: s,
    vkFormatSize'blockSizeInBits :: s,
    vkFormatSize'blockWidth :: s,
    vkFormatSize'blockHeight :: s,
    vkFormatSize'blockDepth :: s
  }
  deriving (Show)

getVkFormatSize :: (VkFormat v, Num s) => v -> VkFormatSize s
getVkFormatSize = \case

  VK_FORMAT_R4G4_UNORM_PACK8 ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_PACKED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 1 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R4G4B4A4_UNORM_PACK16,
      VK_FORMAT_B4G4R4A4_UNORM_PACK16,
      VK_FORMAT_R5G6B5_UNORM_PACK16,
      VK_FORMAT_B5G6R5_UNORM_PACK16,
      VK_FORMAT_R5G5B5A1_UNORM_PACK16,
      VK_FORMAT_B5G5R5A1_UNORM_PACK16,
      VK_FORMAT_A1R5G5B5_UNORM_PACK16
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_PACKED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 2 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R8_UNORM,
      VK_FORMAT_R8_SNORM,
      VK_FORMAT_R8_USCALED,
      VK_FORMAT_R8_SSCALED,
      VK_FORMAT_R8_UINT,
      VK_FORMAT_R8_SINT,
      VK_FORMAT_R8_SRGB
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 1 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R8G8_UNORM,
      VK_FORMAT_R8G8_SNORM,
      VK_FORMAT_R8G8_USCALED,
      VK_FORMAT_R8G8_SSCALED,
      VK_FORMAT_R8G8_UINT,
      VK_FORMAT_R8G8_SINT,
      VK_FORMAT_R8G8_SRGB
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 2 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R8G8B8_UNORM,
      VK_FORMAT_R8G8B8_SNORM,
      VK_FORMAT_R8G8B8_USCALED,
      VK_FORMAT_R8G8B8_SSCALED,
      VK_FORMAT_R8G8B8_UINT,
      VK_FORMAT_R8G8B8_SINT,
      VK_FORMAT_R8G8B8_SRGB,
      VK_FORMAT_B8G8R8_UNORM,
      VK_FORMAT_B8G8R8_SNORM,
      VK_FORMAT_B8G8R8_USCALED,
      VK_FORMAT_B8G8R8_SSCALED,
      VK_FORMAT_B8G8R8_UINT,
      VK_FORMAT_B8G8R8_SINT,
      VK_FORMAT_B8G8R8_SRGB
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 3 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R8G8B8A8_UNORM,
      VK_FORMAT_R8G8B8A8_SNORM,
      VK_FORMAT_R8G8B8A8_USCALED,
      VK_FORMAT_R8G8B8A8_SSCALED,
      VK_FORMAT_R8G8B8A8_UINT,
      VK_FORMAT_R8G8B8A8_SINT,
      VK_FORMAT_R8G8B8A8_SRGB,
      VK_FORMAT_B8G8R8A8_UNORM,
      VK_FORMAT_B8G8R8A8_SNORM,
      VK_FORMAT_B8G8R8A8_USCALED,
      VK_FORMAT_B8G8R8A8_SSCALED,
      VK_FORMAT_B8G8R8A8_UINT,
      VK_FORMAT_B8G8R8A8_SINT,
      VK_FORMAT_B8G8R8A8_SRGB
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_A8B8G8R8_UNORM_PACK32,
      VK_FORMAT_A8B8G8R8_SNORM_PACK32,
      VK_FORMAT_A8B8G8R8_USCALED_PACK32,
      VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
      VK_FORMAT_A8B8G8R8_UINT_PACK32,
      VK_FORMAT_A8B8G8R8_SINT_PACK32,
      VK_FORMAT_A8B8G8R8_SRGB_PACK32
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_PACKED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_A2R10G10B10_UNORM_PACK32,
      VK_FORMAT_A2R10G10B10_SNORM_PACK32,
      VK_FORMAT_A2R10G10B10_USCALED_PACK32,
      VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
      VK_FORMAT_A2R10G10B10_UINT_PACK32,
      VK_FORMAT_A2R10G10B10_SINT_PACK32,
      VK_FORMAT_A2B10G10R10_UNORM_PACK32,
      VK_FORMAT_A2B10G10R10_SNORM_PACK32,
      VK_FORMAT_A2B10G10R10_USCALED_PACK32,
      VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
      VK_FORMAT_A2B10G10R10_UINT_PACK32,
      VK_FORMAT_A2B10G10R10_SINT_PACK32
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_PACKED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R16_UNORM,
      VK_FORMAT_R16_SNORM,
      VK_FORMAT_R16_USCALED,
      VK_FORMAT_R16_SSCALED,
      VK_FORMAT_R16_UINT,
      VK_FORMAT_R16_SINT,
      VK_FORMAT_R16_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 2 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R16G16_UNORM,
      VK_FORMAT_R16G16_SNORM,
      VK_FORMAT_R16G16_USCALED,
      VK_FORMAT_R16G16_SSCALED,
      VK_FORMAT_R16G16_UINT,
      VK_FORMAT_R16G16_SINT,
      VK_FORMAT_R16G16_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R16G16B16_UNORM,
      VK_FORMAT_R16G16B16_SNORM,
      VK_FORMAT_R16G16B16_USCALED,
      VK_FORMAT_R16G16B16_SSCALED,
      VK_FORMAT_R16G16B16_UINT,
      VK_FORMAT_R16G16B16_SINT,
      VK_FORMAT_R16G16B16_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 6 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R16G16B16A16_UNORM,
      VK_FORMAT_R16G16B16A16_SNORM,
      VK_FORMAT_R16G16B16A16_USCALED,
      VK_FORMAT_R16G16B16A16_SSCALED,
      VK_FORMAT_R16G16B16A16_UINT,
      VK_FORMAT_R16G16B16A16_SINT,
      VK_FORMAT_R16G16B16A16_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 8 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R32_UINT,
      VK_FORMAT_R32_SINT,
      VK_FORMAT_R32_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R32G32_UINT,
      VK_FORMAT_R32G32_SINT,
      VK_FORMAT_R32G32_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 8 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R32G32B32_UINT,
      VK_FORMAT_R32G32B32_SINT,
      VK_FORMAT_R32G32B32_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 12 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R32G32B32A32_UINT,
      VK_FORMAT_R32G32B32A32_SINT,
      VK_FORMAT_R32G32B32A32_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R64_UINT,
      VK_FORMAT_R64_SINT,
      VK_FORMAT_R64_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 8 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R64G64_UINT,
      VK_FORMAT_R64G64_SINT,
      VK_FORMAT_R64G64_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R64G64B64_UINT,
      VK_FORMAT_R64G64B64_SINT,
      VK_FORMAT_R64G64B64_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 24 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_R64G64B64A64_UINT,
      VK_FORMAT_R64G64B64A64_SINT,
      VK_FORMAT_R64G64B64A64_SFLOAT
    ] ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 32 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_B10G11R11_UFLOAT_PACK32,
      VK_FORMAT_E5B9G9R9_UFLOAT_PACK32
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_PACKED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  VK_FORMAT_D16_UNORM ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_DEPTH_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 2 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  VK_FORMAT_X8_D24_UNORM_PACK32 ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_PACKED_BIT .|. VK_FORMAT_SIZE_DEPTH_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  VK_FORMAT_D32_SFLOAT ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_DEPTH_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  VK_FORMAT_S8_UINT ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_STENCIL_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 1 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  VK_FORMAT_D16_UNORM_S8_UINT ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_DEPTH_BIT .|. VK_FORMAT_SIZE_STENCIL_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 3 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  VK_FORMAT_D24_UNORM_S8_UINT ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_DEPTH_BIT .|. VK_FORMAT_SIZE_STENCIL_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 4 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  VK_FORMAT_D32_SFLOAT_S8_UINT ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_DEPTH_BIT .|. VK_FORMAT_SIZE_STENCIL_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 8 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_BC1_RGB_UNORM_BLOCK,
      VK_FORMAT_BC1_RGB_SRGB_BLOCK,
      VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
      VK_FORMAT_BC1_RGBA_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 8 * 8,
      vkFormatSize'blockWidth = 4,
      vkFormatSize'blockHeight = 4,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_BC2_UNORM_BLOCK,
      VK_FORMAT_BC2_SRGB_BLOCK,
      VK_FORMAT_BC3_UNORM_BLOCK,
      VK_FORMAT_BC3_SRGB_BLOCK,
      VK_FORMAT_BC4_UNORM_BLOCK,
      VK_FORMAT_BC4_SNORM_BLOCK,
      VK_FORMAT_BC5_UNORM_BLOCK,
      VK_FORMAT_BC5_SNORM_BLOCK,
      VK_FORMAT_BC6H_UFLOAT_BLOCK,
      VK_FORMAT_BC6H_SFLOAT_BLOCK,
      VK_FORMAT_BC7_UNORM_BLOCK,
      VK_FORMAT_BC7_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 4,
      vkFormatSize'blockHeight = 4,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
      VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
      VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
      VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 8 * 8,
      vkFormatSize'blockWidth = 4,
      vkFormatSize'blockHeight = 4,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
      VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
      VK_FORMAT_EAC_R11_UNORM_BLOCK,
      VK_FORMAT_EAC_R11_SNORM_BLOCK,
      VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
      VK_FORMAT_EAC_R11G11_SNORM_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 4,
      vkFormatSize'blockHeight = 4,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
      VK_FORMAT_ASTC_4x4_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 4,
      vkFormatSize'blockHeight = 4,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
      VK_FORMAT_ASTC_5x4_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 5,
      vkFormatSize'blockHeight = 4,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
      VK_FORMAT_ASTC_5x5_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 5,
      vkFormatSize'blockHeight = 5,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
      VK_FORMAT_ASTC_6x5_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 6,
      vkFormatSize'blockHeight = 5,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
      VK_FORMAT_ASTC_6x6_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 6,
      vkFormatSize'blockHeight = 6,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
      VK_FORMAT_ASTC_8x5_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 8,
      vkFormatSize'blockHeight = 5,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
      VK_FORMAT_ASTC_8x6_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 8,
      vkFormatSize'blockHeight = 6,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
      VK_FORMAT_ASTC_8x8_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 8,
      vkFormatSize'blockHeight = 8,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
      VK_FORMAT_ASTC_10x5_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 10,
      vkFormatSize'blockHeight = 5,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
      VK_FORMAT_ASTC_10x6_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 10,
      vkFormatSize'blockHeight = 6,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
      VK_FORMAT_ASTC_10x8_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 10,
      vkFormatSize'blockHeight = 8,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
      VK_FORMAT_ASTC_10x10_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 10,
      vkFormatSize'blockHeight = 10,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
      VK_FORMAT_ASTC_12x10_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 12,
      vkFormatSize'blockHeight = 10,
      vkFormatSize'blockDepth = 1
    }

  x | x `elem` [
      VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
      VK_FORMAT_ASTC_12x12_SRGB_BLOCK
    ] ->
    VkFormatSize {
      vkFormatSize'flags = VK_FORMAT_SIZE_COMPRESSED_BIT,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 16 * 8,
      vkFormatSize'blockWidth = 12,
      vkFormatSize'blockHeight = 12,
      vkFormatSize'blockDepth = 1
    }

  _ ->
    VkFormatSize {
      vkFormatSize'flags = 0,
      vkFormatSize'paletteSizeInBits = 0,
      vkFormatSize'blockSizeInBits = 0 * 8,
      vkFormatSize'blockWidth = 1,
      vkFormatSize'blockHeight = 1,
      vkFormatSize'blockDepth = 1
    }
